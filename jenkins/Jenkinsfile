pipeline {
    agent any

    parameters {
        choice(
            name: 'FUNCTION',
            choices: ['list', 'compare', 'profile', 'merge'],
            description: 'Function to execute'
        )
        string(name: 'FILES', defaultValue: 'sample_data1.csv,sample_data2.csv', description: 'Comma-separated CSV file names')
        string(name: 'ARGS', defaultValue: '', description: 'Extra arguments (space-separated)')
    }

    stages {
        stage('Health Check') {
            steps {
                script {
                    echo "üîç Checking services..."

                    // Check Spark Master UI
                    def sparkCheck = sh(
                        script: 'curl -s http://tester-spark-master:8080 > /dev/null',
                        returnStatus: true
                    )
                    if (sparkCheck == 0) {
                        echo "‚úÖ Spark Master is healthy"
                    } else {
                        echo "‚ö†Ô∏è Spark Master UI not accessible (this is OK - processing will work in local mode)"
                    }

                    // Check Python Runner
                    def pythonCheck = sh(
                        script: 'docker exec python-runner python --version',
                        returnStatus: true
                    )
                    if (pythonCheck == 0) {
                        echo "‚úÖ Python Runner is healthy"
                    } else {
                        error("‚ùå Python Runner is not accessible")
                    }
                }
            }
        }

        stage('Validate Files') {
            when {
                not {
                    equals expected: 'list', actual: params.FUNCTION
                }
            }
            steps {
                script {
                    echo "üìÅ Checking if files exist..."

                    def files = params.FILES.split(',').collect { it.trim() }

                    for (file in files) {
                        if (file && file != '') {
                            def fileCheck = sh(
                                script: "docker exec python-runner test -f /app/data/${file}",
                                returnStatus: true
                            )
                            if (fileCheck != 0) {
                                error("‚ùå File ${file} not found in /app/data/")
                            }
                        }
                    }

                    echo "‚úÖ All files exist: ${files.join(', ')}"
                }
            }
        }

        stage('Execute Function') {
            steps {
                script {
                    echo "üîÑ Running ${params.FUNCTION} function..."

                    def command = "docker exec python-runner python /app/scripts/dataframe_processor.py ${params.FUNCTION}"

                    // Add files if not listing functions
                    if (params.FUNCTION != 'list') {
                        def files = params.FILES.split(',').collect { it.trim() }.join(' ')
                        command += " ${files}"
                    }

                    // Add additional arguments if provided
                    def args = params.ARGS.trim()
                    if (args) {
                        command += " ${args}"
                    }

                    echo "üìã Command: ${command}"

                    def result = sh(
                        script: command,
                        returnStatus: true
                    )

                    if (result == 0) {
                        echo "‚úÖ Function executed successfully!"
                    } else {
                        error("‚ùå Function execution failed")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üéâ DataFrame operation completed successfully!"
            echo "üìä Function: ${params.FUNCTION}"
            if (params.FUNCTION != 'list') {
                echo "üìÅ Files: ${params.FILES}"
            }
            if (params.ARGS) {
                echo "‚öôÔ∏è Arguments: ${params.ARGS}"
            }
        }
        failure {
            echo "‚ùå DataFrame operation failed!"
            echo "üîç Check the logs above for error details"
            echo "üí° Common issues:"
            echo "   - Ensure CSV files exist in the data/ directory"
            echo "   - Verify file names are correct (case-sensitive)"
            echo "   - Check that the python-runner container is running"
        }
        always {
            echo "üîó Access URLs:"
            echo "   Jenkins: http://localhost:8788"
            echo "   Spark UI: http://localhost:8082"
        }
    }
}