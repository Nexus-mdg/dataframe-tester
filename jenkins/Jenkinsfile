pipeline {
    agent any

    parameters {
        choice(
            name: 'FUNCTION',
            choices: ['compare', 'merge', 'profile', 'validate', 'aggregate'],
            description: 'Function to execute'
        )
        string(name: 'FILES', defaultValue: 'data1.csv,data2.csv', description: 'Comma-separated CSV file names')
        string(name: 'ARGS', defaultValue: '', description: 'Extra arguments (space-separated)')
    }

    stages {
        stage('Health Check') {
            steps {
                script {
                    echo "üîç Checking services..."

                    // Check Spark Master
                    def sparkCheck = sh(
                        script: 'curl -s http://spark-master:8080 > /dev/null',
                        returnStatus: true
                    )
                    if (sparkCheck == 0) {
                        echo "‚úÖ Spark Master is healthy"
                    } else {
                        error("‚ùå Spark Master is not accessible")
                    }

                    // Check Python Runner
                    def pythonCheck = sh(
                        script: 'docker exec python-runner python --version',
                        returnStatus: true
                    )
                    if (pythonCheck == 0) {
                        echo "‚úÖ Python Runner is healthy"
                    } else {
                        error("‚ùå Python Runner is not accessible")
                    }
                }
            }
        }

        stage('Validate Files') {
            steps {
                script {
                    echo "üìÅ Checking if files exist..."

                    def files = params.FILES.split(',').collect { it.trim() }

                    for (file in files) {
                        def fileCheck = sh(
                            script: "docker exec python-runner test -f /app/data/${file}",
                            returnStatus: true
                        )
                        if (fileCheck != 0) {
                            error("‚ùå File ${file} not found in /app/data/")
                        }
                    }

                    echo "‚úÖ All files exist: ${files.join(', ')}"
                }
            }
        }

        stage('Execute Function') {
            steps {
                script {
                    echo "üîÑ Running ${params.FUNCTION} function..."

                    def files = params.FILES.split(',').collect { it.trim() }.join(' ')
                    def args = params.ARGS.trim()
                    def command = "docker exec python-runner python /app/scripts/dataframe_processor.py ${params.FUNCTION} ${files}"

                    if (args) {
                        command += " ${args}"
                    }

                    echo "üìã Command: ${command}"

                    def result = sh(
                        script: command,
                        returnStatus: true
                    )

                    if (result == 0) {
                        echo "‚úÖ Function executed successfully!"
                    } else {
                        error("‚ùå Function execution failed")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Function executed successfully!"
        }
        failure {
            echo "‚ùå Function execution failed"
        }
        always {
            echo "üìã Job completed: ${params.FUNCTION} on files: ${params.FILES}"
        }
    }
}